name: Deployment Workflow

on:
  push:
    branches:
      - main

jobs:
  integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # - name: Set up SSH
      #   uses: webfactory/ssh-agent@v0.5.4
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check if Initial Setup is Needed
        id: check_setup
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          script_mode: 'pipe'
          # set_outputs: true
          script: |
            if [ ! -f /home/${{ secrets.SSH_USERNAME }}/.setup_done ]; then
              echo "needs_setup=true"
            else
              echo "needs_setup=false"
            fi

      - name: Initial Server Setup
        if: steps.check_setup.outputs.needs_setup == 'true'
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            echo "⭐️ Git 설정"
            git config --global user.name "DOHK team"
            git config --global user.email "dohk@team.com"

            echo "⭐️ Miniconda 설치"
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda
            echo "export PATH=\"$HOME/miniconda/bin:\$PATH\"" >> ~/.bashrc
            source ~/.bashrc

            echo "⭐️ 시스템 업데이트 및 PostgreSQL 설치"
            sudo apt update && sudo apt -y upgrade
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo apt-get update -y
            sudo apt-get -y install postgresql-14 apt-transport-https ca-certificates curl gnupg-agent software-properties-common

            echo "⭐️ Docker 설치 및 Docker 권한 부여"
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update -y
            sudo apt-get -y install docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker ${{ secrets.SSH_USERNAME }}
            sudo service docker restart
            sudo apt -y install docker-compose

            echo "⭐️ SSH 키 생성 및 GitHub에 등록"
            ssh-keygen -t rsa -b 4096 -C "dohk@team.com" -f ~/.ssh/id_rsa -N ""
            PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -X POST \
                -d "{\"title\":\"Server SSH Key\",\"key\":\"$PUBLIC_KEY\"}" \
                https://api.github.com/user/keys

            echo "Astronomer 설치 및 Airflow 시작"
            curl -sSL install.astronomer.io | sudo bash -s -- v1.25.0 
            git clone git@github.com:TEDD325/airflow-dev.git
            cd airflow-dev
            astro dev start &
            sleep 300
            pkill astro

            echo "⭐️ 설정 완료"
            touch /home/${{ secrets.SSH_USERNAME }}/.setup_done

  deployment:
    runs-on: ubuntu-latest
    needs: integration  # integration job이 완료된 후 실행

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Deploy Application
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            cd ${{ github.repository.name }}
            git pull origin main
            echo "⭐️ 배포 완료"
            # 추가적인 배포 명령어들